a : Number = NULL;        // (Empty) Pointer to Number class
a : Number = 6;           // Fast constructor, like calling Number(6)
a : Number = Number(1,6); // Normal constructor calling

a = 7;                    // Calling method "Assign" in class "Number"

a = Number(5);            // Calling method "Assign" in class "Number". If class Number given, clone object (implemented in Number definition. super method copy pointer only)

b : Number = a;           // Like "a : Number = 6;"

c : Number = NULL;

c = a;                    // Cloning. Like example "a = Number(5);"

c = a.Clone();            // CLONING. Done in class definition using overwritable method (super method just copy memory using memcpy)

// Constructor and Destroyer
TestClass {
  content : Number = 0;

  (a : Number) {
    this.content = a;
  }
}

// Inheritance method A
ParentA {

}

ParentA.Children {

}

ParentA.Children.Brother {

}

tA : Parent.Children.Brother = NULL;

// Inheritance method B
ParentB {
  Children {
    Brother {

    }
  }
}

tB : ParentB.Children.Brother = NULL;

// Derivation example 1
ClassA {

}

ClassB {

}

MixClass : ClassA, ClassB {

}

t1 : MixClass = NULL;

// Derivation example 2 (Inheritance but with single name)
Parent2 {

}

Children : Parent2 {

}

Brother : Children {

}

t1 : Brother = NULL;

// Extension
Number {
  Add(a:Number, b:Number) {}
}

Matrix {
  Add(a:Matrix, b:Number) {}
  Add(a:Matrix, b:Matrix) {}
}

Number {
  Add(a:Number, b:Matrix) {}
}


/*
for (i : Number = 0; i < 10; i++) {
    <i;
}
*/
/*
// Using global types classes (String and Number)
a : String = "Hello";
b : String = "World!";
pi : Number = 3.1415;

print(pi);
print(a + " " + b);
print("Value of $1 is: $2", a, pi);
print('Value of {a} is: {pi}');

c : String;
c = '{a} {b} {pi}';
print(c);

// Linking (like pointers)
c1 : Number = Number(10);
c2 : Number <- NULL;

c1->c2;
c2<-c1;
*/
